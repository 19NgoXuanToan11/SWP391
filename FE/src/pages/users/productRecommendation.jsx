import React, { useState, useEffect } from "react";
import {
  Card,
  List,
  Image,
  Button,
  Tag,
  Typography,
  Rate,
  Badge,
  Tooltip,
  Divider,
} from "antd";
import {
  ShoppingOutlined,
  HeartOutlined,
  CheckCircleFilled,
  InfoCircleOutlined,
  HeartFilled,
} from "@ant-design/icons";
import { useLocation, Link, useNavigate } from "react-router-dom";
import { motion } from "framer-motion";
import api from "../../config/axios";
import endpoints from "../../constants/endpoint";
import { useDispatch, useSelector } from "react-redux";
import { message } from "antd";
import { addToCart } from "../../store/slices/cartSlice";
import { toggleWishlist } from "../../store/slices/wishlistSlice";

const { Title, Text, Paragraph } = Typography;

export function ProductRecommendationPage() {
  const location = useLocation();
  const quizResults =
    location.state?.quizResults ||
    JSON.parse(localStorage.getItem("quizResults"));
  const [recommendations, setRecommendations] = useState([]);
  const [allProducts, setAllProducts] = useState([]);
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const wishlist = useSelector((state) => state.wishlist.items);

  // Mapping lo·∫°i da t·ª´ quiz sang key trong recommendations
  const skinTypeMapping = {
    "Da d·∫ßu": "oily",
    "Da kh√¥": "dry",
    "Da h·ªón h·ª£p": "combination",
    "Da nh·∫°y c·∫£m": "sensitive",
  };

  // ƒê·ªãnh nghƒ©a c√°c v·∫•n ƒë·ªÅ da
  const skinConcerns = {
    acne: "M·ª•n",
    darkSpots: "ƒê·ªëm th√¢m n√°m",
    wrinkles: "N·∫øp nhƒÉn",
    dryness: "Kh√¥ da",
    sensitivity: "Da nh·∫°y c·∫£m",
    oiliness: "Da d·∫ßu",
    largePores: "L·ªó ch√¢n l√¥ng to",
    dullness: "Da x·ªân m√†u",
    redness: "Da ƒë·ªè",
    unevenTexture: "Da kh√¥ng ƒë·ªÅu m√†u",
  };

  // H√†m chuy·ªÉn ƒë·ªïi key th√†nh text hi·ªÉn th·ªã
  const getConcernText = (concernKey) => {
    return skinConcerns[concernKey] || concernKey;
  };

  // Th√™m h√†m chuy·ªÉn ƒë·ªïi t·ª´ ti·∫øng Anh sang ti·∫øng Vi·ªát
  const translateSkinConcern = (concern) => {
    const translations = {
      acne: "M·ª•n & Th√¢m m·ª•n",
      wrinkles: "N·∫øp nhƒÉn & L√£o h√≥a",
      darkSpots: "ƒê·ªëm n√¢u & TƒÉng s·∫Øc t·ªë",
      dullness: "Da x·ªân m√†u & Kh√¥ng ƒë·ªÅu",
      dryness: "Da kh√¥ & Thi·∫øu ·∫©m",
      oiliness: "Da d·∫ßu",
      largePores: "L·ªó ch√¢n l√¥ng to",
      sensitivity: "Da nh·∫°y c·∫£m",
      redness: "Da ƒë·ªè & K√≠ch ·ª©ng",
      unevenTexture: "K·∫øt c·∫•u da kh√¥ng ƒë·ªÅu",
    };
    return translations[concern] || concern;
  };

  // Fetch t·∫•t c·∫£ s·∫£n ph·∫©m t·ª´ API
  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await api.get(endpoints.GET_PRODUCTS);
        setAllProducts(response.data);
      } catch (error) {
        console.error("Error fetching products:", error);
      }
    };
    fetchProducts();
  }, []);

  // L·ªçc s·∫£n ph·∫©m theo lo·∫°i da
  useEffect(() => {
    const loadRecommendations = () => {
      if (!quizResults || !allProducts.length) return;

      const userSkinType = quizResults?.skinType;
      const userConcerns = quizResults?.concerns || [];
      console.log("User skin type:", userSkinType);
      console.log("User concerns:", userConcerns);

      // L·ªçc s·∫£n ph·∫©m ph√π h·ª£p v·ªõi lo·∫°i da
      const matchingProducts = allProducts
        .filter((product) => {
          // Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m ph√π h·ª£p v·ªõi lo·∫°i da
          if (
            userSkinType === "Da d·∫ßu" &&
            (product.skinTypeName === "Da d·∫ßu" ||
              product.skinTypeName === "M·ªçi lo·∫°i da")
          ) {
            return true;
          }
          if (
            userSkinType === "Da kh√¥" &&
            (product.skinTypeName === "Da kh√¥" ||
              product.skinTypeName === "M·ªçi lo·∫°i da")
          ) {
            return true;
          }
          if (
            userSkinType === "Da h·ªón h·ª£p" &&
            (product.skinTypeName === "Da h·ªón h·ª£p" ||
              product.skinTypeName === "M·ªçi lo·∫°i da")
          ) {
            return true;
          }
          if (
            userSkinType === "Da nh·∫°y c·∫£m" &&
            (product.skinTypeName === "Da nh·∫°y c·∫£m" ||
              product.skinTypeName === "M·ªçi lo·∫°i da")
          ) {
            return true;
          }

          return false;
        })
        .map((product) => {
          // T√≠nh ƒëi·ªÉm ph√π h·ª£p d·ª±a tr√™n lo·∫°i da v√† v·∫•n ƒë·ªÅ da
          let matchScore = 70; // ƒêi·ªÉm c∆° b·∫£n

          // N·∫øu s·∫£n ph·∫©m ph√π h·ª£p ch√≠nh x√°c v·ªõi lo·∫°i da
          if (product.skinTypeName === userSkinType) {
            matchScore += 20;
          } else if (product.skinTypeName === "M·ªçi lo·∫°i da") {
            matchScore += 10;
          }

          // N·∫øu s·∫£n ph·∫©m gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ da c·ªßa ng∆∞·ªùi d√πng
          const productConcerns = product.skinConcerns || [];
          const matchingConcerns = userConcerns.filter((concern) =>
            productConcerns.includes(concern)
          );

          if (matchingConcerns.length > 0) {
            matchScore += matchingConcerns.length * 5;
          }

          return {
            id: product.productId,
            name: product.productName,
            brand: product.brandName,
            price: product.price,
            rating: product.rating || 4.5,
            reviews: product.reviewCount || 0,
            image: product.imageUrls,
            matchScore: Math.min(matchScore, 100), // Gi·ªõi h·∫°n ƒëi·ªÉm t·ªëi ƒëa l√† 100
            description: product.description,
            benefits: [product.mainIngredients], // Chuy·ªÉn th√†nh array n·∫øu c·∫ßn
            stockStatus: product.stock > 0 ? "C√≤n h√†ng" : "H·∫øt h√†ng",
            isNew: product.isNew || false,
            skinType: product.skinTypeName,
            concerns: product.skinConcerns || [],
          };
        })
        .sort((a, b) => b.matchScore - a.matchScore); // S·∫Øp x·∫øp theo ƒëi·ªÉm ph√π h·ª£p

      setRecommendations(matchingProducts);
    };

    loadRecommendations();
  }, [quizResults, allProducts]);

  const formatPrice = (price) => {
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(price);
  };

  const handleAddToCart = (product) => {
    try {
      dispatch(
        addToCart({
          id: product.id,
          name: product.name,
          price: product.price,
          image: product.image,
          brand: product.brand,
          quantity: 1,
        })
      );
      message.success("ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!");
    } catch (error) {
      message.error("Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!");
    }
  };

  const handleToggleWishlist = (product) => {
    try {
      dispatch(
        toggleWishlist({
          id: product.id,
          name: product.name,
          price: product.price,
          image: product.image,
          brand: product.brand,
        })
      );
      const isInWishlist = wishlist.some((item) => item.id === product.id);
      message.success(
        isInWishlist
          ? "ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi danh s√°ch y√™u th√≠ch!"
          : "ƒê√£ th√™m s·∫£n ph·∫©m v√†o danh s√°ch y√™u th√≠ch!"
      );
    } catch (error) {
      message.error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t danh s√°ch y√™u th√≠ch!");
    }
  };

  // Th√™m h√†m x·ª≠ l√Ω click v√†o s·∫£n ph·∫©m
  const handleProductClick = (productId) => {
    navigate(`/product/${productId}`);
  };

  return (
    <div className="min-h-screen py-12 px-4">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-12"
        >
          <h1 className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-pink-600 to-purple-600 text-transparent bg-clip-text mb-4">
            S·∫£n Ph·∫©m Ph√π H·ª£p V·ªõi L√†n Da C·ªßa B·∫°n
          </h1>
          <p className="text-gray-600 max-w-3xl mx-auto">
            D·ª±a tr√™n k·∫øt qu·∫£ ph√¢n t√≠ch l√†n da, ch√∫ng t√¥i ƒë√£ ch·ªçn ra nh·ªØng s·∫£n
            ph·∫©m ph√π h·ª£p nh·∫•t ƒë·ªÉ gi√∫p b·∫°n ƒë·∫°t ƒë∆∞·ª£c l√†n da kh·ªèe m·∫°nh v√† r·∫°ng r·ª°.
          </p>
        </motion.div>

        {/* K·∫øt qu·∫£ ph√¢n t√≠ch da */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-white/90 backdrop-blur-md rounded-3xl p-6 mb-10 shadow-xl border border-white/50"
        >
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* Lo·∫°i da */}
            <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-4 shadow-sm border border-pink-100/50 transition-all hover:shadow-md h-full">
              <div className="flex items-center gap-3">
                <div className="w-12 h-12 rounded-full bg-blue-100 flex items-center justify-center">
                  <span className="text-blue-600 text-xl">üë§</span>
                </div>
                <div>
                  <p className="text-gray-500 text-sm">Lo·∫°i da c·ªßa b·∫°n</p>
                  <p className="font-semibold text-lg text-blue-600">
                    {quizResults?.skinType || "Ch∆∞a x√°c ƒë·ªãnh"}
                  </p>
                </div>
              </div>
            </div>

            {/* V·∫•n ƒë·ªÅ v·ªÅ da */}
            <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-4 shadow-sm border border-pink-100/50 transition-all hover:shadow-md h-full">
              <div className="flex items-start gap-3">
                <div className="w-12 h-12 rounded-full bg-pink-100 flex items-center justify-center">
                  <span className="text-pink-600 text-xl">‚ö†Ô∏è</span>
                </div>
                <div className="flex-1">
                  <p className="text-gray-500 text-sm">
                    V·∫•n ƒë·ªÅ v·ªÅ da c·∫ßn quan t√¢m
                  </p>

                  {quizResults?.concerns?.length > 0 ? (
                    <div className="flex flex-wrap gap-2 mt-2">
                      {quizResults.concerns.map((concern, index) => (
                        <span
                          key={index}
                          className="px-3 py-1 bg-gradient-to-r from-pink-500/10 to-purple-500/10 text-pink-700 rounded-full text-sm font-medium border border-pink-200/50"
                        >
                          {translateSkinConcern(concern)}
                        </span>
                      ))}
                    </div>
                  ) : (
                    <p className="font-semibold text-lg text-green-600 mt-1">
                      Kh√¥ng c√≥ v·∫•n ƒë·ªÅ ƒë·∫∑c bi·ªát
                    </p>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* N√∫t l√†m l·∫°i b√†i ki·ªÉm tra */}
          <div className="flex justify-center mt-4">
            <button
              onClick={() => navigate("/quiz")}
              className="flex items-center gap-2 px-6 py-2.5 bg-gradient-to-r from-pink-500 to-purple-500 text-white rounded-full text-sm font-medium shadow-sm hover:shadow-md transform hover:scale-105 transition-all duration-300"
            >
              <span className="text-xs">‚Ü∫</span>
              L√†m l·∫°i b√†i ki·ªÉm tra
            </button>
          </div>
        </motion.div>

        {/* Danh s√°ch s·∫£n ph·∫©m */}
        <div className="mb-8">
          <h2 className="text-2xl font-bold mb-6 flex items-center">
            <span className="w-8 h-8 bg-pink-100 rounded-full flex items-center justify-center mr-2">
              <span className="text-pink-600">‚úì</span>
            </span>
            S·∫£n ph·∫©m ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t cho {quizResults?.skinType}
          </h2>

          {recommendations.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {recommendations.map((product) => (
                <motion.div
                  key={product.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.1 }}
                  className="bg-white/90 backdrop-blur-sm rounded-2xl overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 border border-white/50"
                >
                  <div className="relative">
                    <img
                      src={
                        product.image[0] ||
                        "https://via.placeholder.com/300x300"
                      }
                      alt={product.name}
                      className="w-full h-64 object-cover"
                    />
                    <div className="absolute top-3 right-3 bg-white/90 backdrop-blur-sm rounded-full px-3 py-1 text-sm font-medium text-pink-600 border border-pink-100">
                      Ph√π h·ª£p {product.matchScore}%
                    </div>
                    {product.isNew && (
                      <div className="absolute top-3 left-3 bg-gradient-to-r from-pink-500 to-purple-500 text-white rounded-full px-3 py-1 text-xs font-medium">
                        M·ªõi
                      </div>
                    )}
                  </div>

                  <div className="p-5">
                    <div className="flex justify-between items-start mb-2">
                      <h3 className="text-lg font-bold text-gray-800 line-clamp-2">
                        {product.name}
                      </h3>
                      <span className="text-pink-600 font-bold">
                        {product.price.toLocaleString()}‚Ç´
                      </span>
                    </div>

                    <p className="text-sm text-gray-500 mb-3">
                      {product.brand}
                    </p>

                    <div className="flex items-center gap-1 mb-3">
                      <div className="flex">
                        {[1, 2, 3, 4, 5].map((star) => (
                          <span
                            key={star}
                            className={`text-${
                              star <= Math.floor(product.rating)
                                ? "yellow"
                                : "gray"
                            }-400`}
                          >
                            ‚òÖ
                          </span>
                        ))}
                      </div>
                      <span className="text-sm text-gray-500">
                        ({product.reviews})
                      </span>
                    </div>

                    <div className="flex flex-wrap gap-2 mb-4">
                      <span className="px-2 py-1 bg-blue-100 text-blue-700 rounded-full text-xs">
                        {product.skinType}
                      </span>
                      {product.concerns.slice(0, 2).map((concern, index) => (
                        <span
                          key={index}
                          className="px-2 py-1 bg-pink-100 text-pink-700 rounded-full text-xs"
                        >
                          {translateSkinConcern(concern)}
                        </span>
                      ))}
                    </div>

                    <button
                      onClick={() => navigate(`/product/${product.id}`)}
                      className="w-full py-2 bg-gradient-to-r from-pink-500 to-purple-500 text-white rounded-xl font-medium hover:shadow-md transition-all duration-300"
                    >
                      Xem chi ti·∫øt
                    </button>
                  </div>
                </motion.div>
              ))}
            </div>
          ) : (
            <div className="text-center py-12 bg-white/80 backdrop-blur-sm rounded-2xl">
              <p className="text-gray-600">
                Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p. Vui l√≤ng th·ª≠ l·∫°i b√†i ki·ªÉm tra.
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
